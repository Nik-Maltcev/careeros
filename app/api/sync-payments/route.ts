import { NextRequest, NextResponse } from 'next/server'
import { supabase } from '@/lib/supabase'
import { RobokassaService } from '@/lib/robokassa'

export async function POST(request: NextRequest) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    const authHeader = request.headers.get('authorization')
    const token = authHeader?.replace('Bearer ', '')
    
    if (!token) {
      return NextResponse.json(
        { error: '–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è' },
        { status: 401 }
      )
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ Supabase
    const { data: { user }, error: userError } = await supabase.auth.getUser(token)
    
    if (userError || !user) {
      return NextResponse.json(
        { error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω' },
        { status: 401 }
      )
    }

    console.log('üîÑ Syncing payments for user:', user.id)

    // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const { data: pendingPayments, error: paymentsError } = await supabase
      .from('payments')
      .select('*')
      .eq('user_id', user.id)
      .eq('status', 'pending')
      .order('created_at', { ascending: false })

    if (paymentsError) {
      console.error('Error fetching pending payments:', paymentsError)
      return NextResponse.json(
        { error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–µ–π' },
        { status: 500 }
      )
    }

    console.log('üìã Found pending payments:', pendingPayments)

    if (!pendingPayments || pendingPayments.length === 0) {
      return NextResponse.json({
        success: true,
        message: '–ù–µ—Ç –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π',
        processedCount: 0
      })
    }

    // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const { data: profile, error: profileError } = await supabase
      .from('profiles')
      .select('*')
      .eq('id', user.id)
      .single()

    if (profileError || !profile) {
      console.error('Error fetching profile:', profileError)
      return NextResponse.json(
        { error: '–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' },
        { status: 404 }
      )
    }

    let totalInterviewsAdded = 0
    let processedPayments = 0

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –ø–ª–∞—Ç–µ–∂
    for (const payment of pendingPayments) {
      const plan = RobokassaService.getPlanById(payment.plan_id)
      if (!plan) {
        console.error('Plan not found:', payment.plan_id)
        continue
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä–≤—å—é
      totalInterviewsAdded += plan.interviews

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
      const { error: updateError } = await supabase
        .from('payments')
        .update({
          status: 'completed',
          payment_method: 'manual_sync',
          completed_at: new Date().toISOString()
        })
        .eq('id', payment.id)

      if (updateError) {
        console.error('Error updating payment:', updateError)
      } else {
        processedPayments++
        console.log(`‚úÖ Processed payment ${payment.inv_id} for ${plan.interviews} interviews`)
      }
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const newMaxInterviews = profile.max_interviews + totalInterviewsAdded
    const { error: profileUpdateError } = await supabase
      .from('profiles')
      .update({
        max_interviews: newMaxInterviews
      })
      .eq('id', user.id)

    if (profileUpdateError) {
      console.error('Error updating profile:', profileUpdateError)
      return NextResponse.json(
        { error: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è' },
        { status: 500 }
      )
    }

    console.log(`‚úÖ Added ${totalInterviewsAdded} interviews to user ${user.id}. New total: ${newMaxInterviews}`)

    return NextResponse.json({
      success: true,
      message: `–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø–ª–∞—Ç–µ–∂–µ–π: ${processedPayments}`,
      processedCount: processedPayments,
      interviewsAdded: totalInterviewsAdded,
      newMaxInterviews: newMaxInterviews
    })

  } catch (error) {
    console.error('Payment sync error:', error)
    return NextResponse.json(
      { error: '–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–ª–∞—Ç–µ–∂–µ–π' },
      { status: 500 }
    )
  }
}