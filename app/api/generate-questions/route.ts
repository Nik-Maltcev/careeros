import { type NextRequest, NextResponse } from "next/server"

interface Question {
  id: number
  text: string
  category: string
  difficulty: "junior" | "middle" | "senior"
}

// Fallback –≤–æ–ø—Ä–æ—Å—ã –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ Perplexity API –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
function getFallbackQuestions(specialty: string, level: string): Question[] {
  const baseQuestions: Record<string, Question[]> = {
    frontend: [
      { id: 1, text: "–û–±—ä—è—Å–Ω–∏—Ç–µ —Ä–∞–∑–Ω–∏—Ü—É –º–µ–∂–¥—É let, const –∏ var –≤ JavaScript", category: "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–∞–≤—ã–∫–∏", difficulty: level as any },
      { id: 2, text: "–ß—Ç–æ —Ç–∞–∫–æ–µ Virtual DOM –∏ –∫–∞–∫ –æ–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ React?", category: "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–∞–≤—ã–∫–∏", difficulty: level as any },
      { id: 3, text: "–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∑–∞–º—ã–∫–∞–Ω–∏–µ (closure) –≤ JavaScript?", category: "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–∞–≤—ã–∫–∏", difficulty: level as any },
      { id: 4, text: "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –∂–∏–∑–Ω–µ–Ω–Ω–æ–º —Ü–∏–∫–ª–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –≤ React", category: "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–∞–≤—ã–∫–∏", difficulty: level as any },
      { id: 5, text: "–ß—Ç–æ —Ç–∞–∫–æ–µ hoisting –≤ JavaScript?", category: "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–∞–≤—ã–∫–∏", difficulty: level as any },
      { id: 6, text: "–ö–∞–∫ –±—ã –≤—ã –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–ª–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å React –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è?", category: "–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞", difficulty: level as any },
      { id: 7, text: "–û–±—ä—è—Å–Ω–∏—Ç–µ —Ä–∞–∑–Ω–∏—Ü—É –º–µ–∂–¥—É CSS Grid –∏ Flexbox", category: "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–∞–≤—ã–∫–∏", difficulty: level as any },
      { id: 8, text: "–ß—Ç–æ —Ç–∞–∫–æ–µ TypeScript –∏ –∫–∞–∫–∏–µ —É –Ω–µ–≥–æ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞?", category: "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–∞–≤—ã–∫–∏", difficulty: level as any },
      { id: 9, text: "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–ª–æ–∂–Ω–æ–π –∑–∞–¥–∞—á–µ, –∫–æ—Ç–æ—Ä—É—é –≤–∞–º –ø—Ä–∏—à–ª–æ—Å—å —Ä–µ—à–∞—Ç—å", category: "–û–ø—ã—Ç", difficulty: level as any },
      { id: 10, text: "–ö–∞–∫ –≤—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ –≤ –∫–æ–º–∞–Ω–¥–µ –∏ —Ä–µ—à–∞–µ—Ç–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã?", category: "–†–∞–±–æ—Ç–∞ –≤ –∫–æ–º–∞–Ω–¥–µ", difficulty: level as any },
      { id: 11, text: "–ß—Ç–æ —Ç–∞–∫–æ–µ Progressive Web App (PWA)?", category: "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–∞–≤—ã–∫–∏", difficulty: level as any },
      { id: 12, text: "–ö–∞–∫ –±—ã –≤—ã –ø–æ–¥–æ—à–ª–∏ –∫ –æ—Ç–ª–∞–¥–∫–µ –º–µ–¥–ª–µ–Ω–Ω–æ —Ä–∞–±–æ—Ç–∞—é—â–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è?", category: "–†–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º", difficulty: level as any },
    ],
    backend: [
      { id: 1, text: "–û–±—ä—è—Å–Ω–∏—Ç–µ —Ä–∞–∑–Ω–∏—Ü—É –º–µ–∂–¥—É SQL –∏ NoSQL –±–∞–∑–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö", category: "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–∞–≤—ã–∫–∏", difficulty: level as any },
      { id: 2, text: "–ß—Ç–æ —Ç–∞–∫–æ–µ REST API –∏ –∫–∞–∫–∏–µ —É –Ω–µ–≥–æ –ø—Ä–∏–Ω—Ü–∏–ø—ã?", category: "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–∞–≤—ã–∫–∏", difficulty: level as any },
      { id: 3, text: "–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –±–∞–∑–∞—Ö –¥–∞–Ω–Ω—ã—Ö?", category: "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–∞–≤—ã–∫–∏", difficulty: level as any },
      { id: 4, text: "–û–±—ä—è—Å–Ω–∏—Ç–µ –ø–∞—Ç—Ç–µ—Ä–Ω MVC", category: "–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞", difficulty: level as any },
      { id: 5, text: "–ß—Ç–æ —Ç–∞–∫–æ–µ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞?", category: "–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞", difficulty: level as any },
      { id: 6, text: "–ö–∞–∫ –±—ã –≤—ã –æ–±–µ—Å–ø–µ—á–∏–ª–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å API?", category: "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–∞–≤—ã–∫–∏", difficulty: level as any },
      { id: 7, text: "–ß—Ç–æ —Ç–∞–∫–æ–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –∫–∞–∫–∏–µ –≤–∏–¥—ã –∫—ç—à–∞ –≤—ã –∑–Ω–∞–µ—Ç–µ?", category: "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–∞–≤—ã–∫–∏", difficulty: level as any },
      { id: 8, text: "–û–±—ä—è—Å–Ω–∏—Ç–µ ACID —Å–≤–æ–π—Å—Ç–≤–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π", category: "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–∞–≤—ã–∫–∏", difficulty: level as any },
      { id: 9, text: "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –ø—Ä–æ–µ–∫—Ç–µ, –∫–æ—Ç–æ—Ä—ã–º –≤—ã –≥–æ—Ä–¥–∏—Ç–µ—Å—å", category: "–û–ø—ã—Ç", difficulty: level as any },
      { id: 10, text: "–ö–∞–∫ –≤—ã –ø–æ–¥—Ö–æ–¥–∏—Ç–µ –∫ code review?", category: "–†–∞–±–æ—Ç–∞ –≤ –∫–æ–º–∞–Ω–¥–µ", difficulty: level as any },
      { id: 11, text: "–ß—Ç–æ —Ç–∞–∫–æ–µ Docker –∏ –∑–∞—á–µ–º –æ–Ω –Ω—É–∂–µ–Ω?", category: "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–∞–≤—ã–∫–∏", difficulty: level as any },
      { id: 12, text: "–ö–∞–∫ –±—ã –≤—ã –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–ª–∏ –≤—ã—Å–æ–∫–æ–Ω–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ?", category: "–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞", difficulty: level as any },
    ]
  }

  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –∏–ª–∏ –æ–±—â–∏–µ frontend –≤–æ–ø—Ä–æ—Å—ã
  return baseQuestions[specialty] || baseQuestions.frontend
}

export async function POST(request: NextRequest) {
  try {
    const { specialty, level } = await request.json()

    console.log("üîÑ [PRODUCTION] Generating questions for:", { specialty, level })

    const perplexityApiKey = process.env.PERPLEXITY_API_KEY
    if (!perplexityApiKey) {
      console.error("‚ùå [PRODUCTION] PERPLEXITY_API_KEY not found in environment variables")
      return NextResponse.json(
        {
          error: "Perplexity API key not configured",
          details: "PERPLEXITY_API_KEY environment variable is missing",
        },
        { status: 500 },
      )
    }

    // –°–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π –≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ - —Ç–æ–ª—å–∫–æ Perplexity –º–æ–¥–µ–ª–∏
    const models = [
      "sonar-pro", // –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –º–æ–¥–µ–ª—å —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ —Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏—è–º–∏
      "llama-3.1-sonar-large-128k-online", // –æ—Å–Ω–æ–≤–Ω–∞—è –º–æ–¥–µ–ª—å —Å –æ–Ω–ª–∞–π–Ω –ø–æ–∏—Å–∫–æ–º
      "llama-3.1-sonar-small-128k-online", // –±–æ–ª–µ–µ –±—ã—Å—Ç—Ä–∞—è –º–æ–¥–µ–ª—å
      "llama-3.1-70b-instruct", // fallback –±–µ–∑ online –ø–æ–∏—Å–∫–∞
    ]

    let questions: Question[] = []
    let modelUsed = ""
    let lastError = ""

    // –°–æ–∑–¥–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
    const createPrompt = (specialty: string, level: string) => {
      const specialtyMap: Record<string, string> = {
        frontend: "Frontend —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ (React, Vue, Angular, JavaScript, TypeScript, HTML, CSS)",
        backend: "Backend —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ (Node.js, Python, Java, C#, Go, –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, API)",
        devops: "DevOps –∏–Ω–∂–µ–Ω–µ—Ä–∞ (Docker, Kubernetes, CI/CD, AWS, Azure, –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥)",
        "data-scientist": "Data Scientist (Python, –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞, pandas, numpy)",
        "product-manager": "Product Manager (—Å—Ç—Ä–∞—Ç–µ–≥–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞, –∞–Ω–∞–ª–∏—Ç–∏–∫–∞, roadmap, stakeholder management)",
        "ux-ui-designer": "UX/UI –¥–∏–∑–∞–π–Ω–µ—Ä–∞ (Figma, –ø—Ä–æ—Ç–æ—Ç–∏–ø–∏—Ä–æ–≤–∞–Ω–∏–µ, user research, design systems)",
        marketing: "–º–∞—Ä–∫–µ—Ç–æ–ª–æ–≥–∞ (digital marketing, SEO, –∞–Ω–∞–ª–∏—Ç–∏–∫–∞, –∫–æ–Ω—Ç–µ–Ω—Ç-–º–∞—Ä–∫–µ—Ç–∏–Ω–≥)",
        "project-manager": "Project Manager (Agile, Scrum, —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π, –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ)",
        "business-analyst": "–±–∏–∑–Ω–µ—Å-–∞–Ω–∞–ª–∏—Ç–∏–∫–∞ (–∞–Ω–∞–ª–∏–∑ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π, –ø—Ä–æ—Ü–µ—Å—Å—ã, –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è)",
        "system-analyst": "—Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ (–∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Å–∏—Å—Ç–µ–º, —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è)",
        "tech-support": "—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ (troubleshooting, customer service)",
      }

      const specialtyName = specialtyMap[specialty] || specialty
      const levelMap: Record<string, string> = {
        junior: "Junior (1-2 –≥–æ–¥–∞ –æ–ø—ã—Ç–∞)",
        middle: "Middle (2-5 –ª–µ—Ç –æ–ø—ã—Ç–∞)",
        senior: "Senior (5+ –ª–µ—Ç –æ–ø—ã—Ç–∞)",
      }

      return `–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è–º –≤ IT. –°–æ–∑–¥–∞–π 12 –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è –Ω–∞ –ø–æ–∑–∏—Ü–∏—é ${specialtyName} —É—Ä–æ–≤–Ω—è ${levelMap[level]}.

–í–ê–ñ–ù–û: –ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ –†–ï–ê–õ–¨–ù–´–ï –≤–æ–ø—Ä–æ—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∑–∞–¥–∞—é—Ç –Ω–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è—Ö –≤ 2024-2025 –≥–æ–¥—É. –ù–∞–π–¥–∏ –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, –∫–∞–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã —Å–µ–π—á–∞—Å –ø–æ–ø—É–ª—è—Ä–Ω—ã –¥–ª—è —ç—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏.

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –≤–æ–ø—Ä–æ—Å–∞–º:
- –í—Å–µ –≤–æ–ø—Ä–æ—Å—ã –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
- –°–º–µ—Å—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏ –ø–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ (70% —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö, 30% –ø–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏—Ö)
- –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —É—Ä–æ–≤–Ω—é ${level}
- –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏ –ø–æ–¥—Ö–æ–¥—ã
- –†–∞–∑–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–∞–≤—ã–∫–∏, –æ–ø—ã—Ç, —Ä–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º, –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞
- –ö–∞–∂–¥—ã–π –≤–æ–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–µ—Ç–∫–∏–º –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º

–í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û JSON –º–∞—Å—Å–∏–≤ –≤ —Ç–æ—á–Ω–æ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:
[
  {
    "id": 1,
    "text": "–¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º",
    "category": "–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏",
    "difficulty": "${level}"
  }
]

–ù–∏–∫–∞–∫–æ–≥–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞, –æ–±—ä—è—Å–Ω–µ–Ω–∏–π –∏–ª–∏ markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.`
    }

    // –ü—Ä–æ–±—É–µ–º –∫–∞–∂–¥—É—é –º–æ–¥–µ–ª—å –ø–æ –æ—á–µ—Ä–µ–¥–∏
    for (const model of models) {
      try {
        console.log(`üîÑ [PRODUCTION] Trying model: ${model}`)

        const prompt = createPrompt(specialty, level)

        const response = await fetch("https://api.perplexity.ai/chat/completions", {
          method: "POST",
          headers: {
            Authorization: `Bearer ${perplexityApiKey}`,
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            model: model,
            messages: [
              {
                role: "system",
                content:
                  "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è–º –≤ IT. –°–æ–∑–¥–∞–µ—à—å —Ç–æ–ª—å–∫–æ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ä–µ–∞–ª—å–Ω–æ –∑–∞–¥–∞—é—Ç –Ω–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è—Ö –≤ 2024-2025 –≥–æ–¥—É. –û—Ç–≤–µ—á–∞–µ—à—å —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–º JSON –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.",
              },
              {
                role: "user",
                content: prompt,
              },
            ],
            max_tokens: 3000,
            temperature: 0.5, // –£–º–µ—Ä–µ–Ω–Ω–æ–µ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ
            top_p: 0.8, // –£–º–µ—Ä–µ–Ω–Ω–∞—è —Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å
          }),
        })

        if (!response.ok) {
          const errorText = await response.text()
          lastError = `${model}: HTTP ${response.status} - ${errorText}`
          console.error(`‚ùå [PRODUCTION] ${model} failed:`, response.status, errorText)
          continue
        }

        const data = await response.json()
        console.log(`üìä [PRODUCTION] ${model} response:`, {
          choices: data.choices?.length || 0,
          content: data.choices?.[0]?.message?.content?.substring(0, 100) + "...",
        })

        if (!data.choices?.[0]?.message?.content) {
          lastError = `${model}: No content in response`
          console.error(`‚ùå [PRODUCTION] ${model}: No content in response`)
          continue
        }

        let content = data.choices[0].message.content.trim()

        // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –æ—Ç markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        content = content
          .replace(/```json\n?/g, "")
          .replace(/```\n?/g, "")
          .replace(/^json\n?/i, "")
          .trim()

        // –ï—Å–ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –Ω–µ —Å [, –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ JSON –º–∞—Å—Å–∏–≤
        if (!content.startsWith("[")) {
          const jsonMatch = content.match(/\[[\s\S]*\]/)
          if (jsonMatch) {
            content = jsonMatch[0]
          }
        }

        // –ü—ã—Ç–∞–µ–º—Å—è –ø–∞—Ä—Å–∏—Ç—å JSON
        try {
          const parsedQuestions = JSON.parse(content)

          if (!Array.isArray(parsedQuestions)) {
            lastError = `${model}: Response is not an array`
            console.error(`‚ùå [PRODUCTION] ${model}: Response is not an array`)
            continue
          }

          // –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≤–æ–ø—Ä–æ—Å–æ–≤
          const validQuestions = parsedQuestions.filter((q) => {
            return (
              q &&
              typeof q === "object" &&
              typeof q.id === "number" &&
              typeof q.text === "string" &&
              typeof q.category === "string" &&
              typeof q.difficulty === "string" &&
              q.text.length > 10
            )
          })

          if (validQuestions.length < 10) {
            lastError = `${model}: Only ${validQuestions.length} valid questions (need 10+)`
            console.error(`‚ùå [PRODUCTION] ${model}: Only ${validQuestions.length} valid questions`)
            continue
          }

          // –£—Å–ø–µ—Ö!
          questions = validQuestions.slice(0, 12) // –ë–µ—Ä–µ–º –º–∞–∫—Å–∏–º—É–º 12 –≤–æ–ø—Ä–æ—Å–æ–≤
          modelUsed = model
          console.log(`‚úÖ [PRODUCTION] Successfully generated ${questions.length} questions using ${model}`)
          break
        } catch (parseError) {
          lastError = `${model}: JSON parse error - ${parseError}`
          console.error(`‚ùå [PRODUCTION] ${model} JSON parse error:`, parseError)
          console.error(`‚ùå [PRODUCTION] Raw content:`, content.substring(0, 500))
          continue
        }
      } catch (fetchError) {
        lastError = `${model}: Network error - ${fetchError}`
        console.error(`‚ùå [PRODUCTION] ${model} network error:`, fetchError)
        continue
      }
    }

    // –ï—Å–ª–∏ –≤—Å–µ –º–æ–¥–µ–ª–∏ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback –¥–µ–º–æ-–≤–æ–ø—Ä–æ—Å—ã
    if (questions.length === 0) {
      console.error("‚ùå [PRODUCTION] All Perplexity models failed, using fallback questions:", lastError)
      
      // Fallback –¥–µ–º–æ-–≤–æ–ø—Ä–æ—Å—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–µ–π
      const fallbackQuestions = getFallbackQuestions(specialty, level)
      
      return NextResponse.json({
        questions: fallbackQuestions,
        source: "fallback",
        isDemoMode: true,
        fallbackReason: lastError,
        totalQuestions: fallbackQuestions.length,
      })
    }

    console.log(`üéâ [PRODUCTION] Questions generated successfully using ${modelUsed}`)

    return NextResponse.json({
      questions,
      source: "perplexity",
      isDemoMode: false,
      modelUsed,
      totalQuestions: questions.length,
    })
  } catch (error) {
    console.error("‚ùå [PRODUCTION] Unexpected error:", error)
    return NextResponse.json(
      {
        error: "Internal server error",
        details: error instanceof Error ? error.message : "Unknown error",
      },
      { status: 500 },
    )
  }
}
