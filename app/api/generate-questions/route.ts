import { type NextRequest, NextResponse } from "next/server"

interface Question {
  id: number
  text: string
  category: string
  difficulty: "junior" | "middle" | "senior"
}

export async function POST(request: NextRequest) {
  try {
    const { specialty, level } = await request.json()

    console.log("üîÑ [PRODUCTION] Generating questions for:", { specialty, level })

    const perplexityApiKey = process.env.PERPLEXITY_API_KEY
    if (!perplexityApiKey) {
      console.error("‚ùå [PRODUCTION] PERPLEXITY_API_KEY not found in environment variables")
      return NextResponse.json(
        {
          error: "Perplexity API key not configured",
          details: "PERPLEXITY_API_KEY environment variable is missing",
        },
        { status: 500 },
      )
    }

    // –°–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π –≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ - —Ç–æ–ª—å–∫–æ Perplexity –º–æ–¥–µ–ª–∏
    const models = [
      "sonar-pro", // –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –º–æ–¥–µ–ª—å —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ —Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏—è–º–∏
      "llama-3.1-sonar-large-128k-online", // –æ—Å–Ω–æ–≤–Ω–∞—è –º–æ–¥–µ–ª—å —Å –æ–Ω–ª–∞–π–Ω –ø–æ–∏—Å–∫–æ–º
      "llama-3.1-sonar-small-128k-online", // –±–æ–ª–µ–µ –±—ã—Å—Ç—Ä–∞—è –º–æ–¥–µ–ª—å
      "llama-3.1-70b-instruct", // fallback –±–µ–∑ online –ø–æ–∏—Å–∫–∞
    ]

    let questions: Question[] = []
    let modelUsed = ""
    let lastError = ""

    // –°–æ–∑–¥–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
    const createPrompt = (specialty: string, level: string) => {
      const specialtyMap: Record<string, string> = {
        frontend: "Frontend —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ (React, Vue, Angular, JavaScript, TypeScript, HTML, CSS)",
        backend: "Backend —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ (Node.js, Python, Java, C#, Go, –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, API)",
        devops: "DevOps –∏–Ω–∂–µ–Ω–µ—Ä–∞ (Docker, Kubernetes, CI/CD, AWS, Azure, –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥)",
        "data-scientist": "Data Scientist (Python, –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞, pandas, numpy)",
        "product-manager": "Product Manager (—Å—Ç—Ä–∞—Ç–µ–≥–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞, –∞–Ω–∞–ª–∏—Ç–∏–∫–∞, roadmap, stakeholder management)",
        "ux-ui-designer": "UX/UI –¥–∏–∑–∞–π–Ω–µ—Ä–∞ (Figma, –ø—Ä–æ—Ç–æ—Ç–∏–ø–∏—Ä–æ–≤–∞–Ω–∏–µ, user research, design systems)",
        marketing: "–º–∞—Ä–∫–µ—Ç–æ–ª–æ–≥–∞ (digital marketing, SEO, –∞–Ω–∞–ª–∏—Ç–∏–∫–∞, –∫–æ–Ω—Ç–µ–Ω—Ç-–º–∞—Ä–∫–µ—Ç–∏–Ω–≥)",
        "project-manager": "Project Manager (Agile, Scrum, —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π, –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ)",
        "business-analyst": "–±–∏–∑–Ω–µ—Å-–∞–Ω–∞–ª–∏—Ç–∏–∫–∞ (–∞–Ω–∞–ª–∏–∑ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π, –ø—Ä–æ—Ü–µ—Å—Å—ã, –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è)",
        "system-analyst": "—Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ (–∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Å–∏—Å—Ç–µ–º, —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è)",
        "tech-support": "—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ (troubleshooting, customer service)",
      }

      const specialtyName = specialtyMap[specialty] || specialty
      const levelMap: Record<string, string> = {
        junior: "Junior (1-2 –≥–æ–¥–∞ –æ–ø—ã—Ç–∞)",
        middle: "Middle (2-5 –ª–µ—Ç –æ–ø—ã—Ç–∞)",
        senior: "Senior (5+ –ª–µ—Ç –æ–ø—ã—Ç–∞)",
      }

      // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
      const randomSeed = Math.floor(Math.random() * 1000)
      const currentTime = new Date().toISOString()
      
      return `–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è–º –≤ IT. –°–æ–∑–¥–∞–π 12 –£–ù–ò–ö–ê–õ–¨–ù–´–• –∏ –†–ê–ó–ù–û–û–ë–†–ê–ó–ù–´–• –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è –Ω–∞ –ø–æ–∑–∏—Ü–∏—é ${specialtyName} —É—Ä–æ–≤–Ω—è ${levelMap[level]}.

–ö–û–ù–¢–ï–ö–°–¢: –°–µ–π—á–∞—Å ${currentTime}, –≥–µ–Ω–µ—Ä–∞—Ü–∏—è #${randomSeed}. –°–æ–∑–¥–∞–π –ù–û–í–´–ï –≤–æ–ø—Ä–æ—Å—ã, –∏–∑–±–µ–≥–∞–π —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤.

–í–ê–ñ–ù–û: 
- –ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ –†–ï–ê–õ–¨–ù–´–ï –≤–æ–ø—Ä–æ—Å—ã –∏–∑ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–π 2024-2025
- –ö–∞–∂–¥—ã–π –≤–æ–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –£–ù–ò–ö–ê–õ–¨–ù–´–ú –∏ –ö–û–ù–ö–†–ï–¢–ù–´–ú
- –ò–∑–±–µ–≥–∞–π –æ–±—â–∏—Ö —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–æ–∫ —Ç–∏–ø–∞ "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–µ–±–µ"
- –í–∫–ª—é—á–∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏ —Ç—Ä–µ–Ω–¥—ã
- –î–æ–±–∞–≤—å –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏ –∏ –∫–µ–π—Å—ã

–†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –í–û–ü–†–û–°–û–í:
- 8 —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ (–∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞, –∫–æ–¥, –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã, best practices)
- 4 –ø–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏—Ö/—Å–∏—Ç—É–∞—Ü–∏–æ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–∞ (–æ–ø—ã—Ç, —Ä–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º, —Ä–∞–±–æ—Ç–∞ –≤ –∫–æ–º–∞–Ω–¥–µ)

–ö–ê–¢–ï–ì–û–†–ò–ò –¥–ª—è ${specialtyName}:
- –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–∞–≤—ã–∫–∏ –∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
- –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –∏ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
- –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏
- –û–ø—ã—Ç –∏ –∫–µ–π—Å—ã
- –†–∞–±–æ—Ç–∞ –≤ –∫–æ–º–∞–Ω–¥–µ
- –†–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º

–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê - –¢–û–õ–¨–ö–û JSON –º–∞—Å—Å–∏–≤:
[
  {
    "id": 1,
    "text": "–ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ",
    "category": "–û–¥–Ω–∞ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤—ã—à–µ",
    "difficulty": "${level}"
  }
]

–ë–ï–ó markdown, –ë–ï–ó –æ–±—ä—è—Å–Ω–µ–Ω–∏–π, –¢–û–õ–¨–ö–û JSON!`
    }

    // –ü—Ä–æ–±—É–µ–º –∫–∞–∂–¥—É—é –º–æ–¥–µ–ª—å –ø–æ –æ—á–µ—Ä–µ–¥–∏
    for (const model of models) {
      try {
        console.log(`üîÑ [PRODUCTION] Trying model: ${model}`)

        const prompt = createPrompt(specialty, level)

        const response = await fetch("https://api.perplexity.ai/chat/completions", {
          method: "POST",
          headers: {
            Authorization: `Bearer ${perplexityApiKey}`,
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            model: model,
            messages: [
              {
                role: "system",
                content:
                  "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è–º –≤ IT. –°–æ–∑–¥–∞–µ—à—å —Ç–æ–ª—å–∫–æ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ä–µ–∞–ª—å–Ω–æ –∑–∞–¥–∞—é—Ç –Ω–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è—Ö –≤ 2024-2025 –≥–æ–¥—É. –û—Ç–≤–µ—á–∞–µ—à—å —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–º JSON –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.",
              },
              {
                role: "user",
                content: prompt,
              },
            ],
            max_tokens: 3000,
            temperature: 0.7, // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–ª—è –±–æ–ª—å—à–µ–≥–æ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
            top_p: 0.9, // –î–æ–±–∞–≤–ª—è–µ–º –¥–ª—è –µ—â–µ –±–æ–ª—å—à–µ–≥–æ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
          }),
        })

        if (!response.ok) {
          const errorText = await response.text()
          lastError = `${model}: HTTP ${response.status} - ${errorText}`
          console.error(`‚ùå [PRODUCTION] ${model} failed:`, response.status, errorText)
          continue
        }

        const data = await response.json()
        console.log(`üìä [PRODUCTION] ${model} response:`, {
          choices: data.choices?.length || 0,
          content: data.choices?.[0]?.message?.content?.substring(0, 100) + "...",
        })

        if (!data.choices?.[0]?.message?.content) {
          lastError = `${model}: No content in response`
          console.error(`‚ùå [PRODUCTION] ${model}: No content in response`)
          continue
        }

        let content = data.choices[0].message.content.trim()

        // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –æ—Ç markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        content = content
          .replace(/```json\n?/g, "")
          .replace(/```\n?/g, "")
          .replace(/^json\n?/i, "")
          .trim()

        // –ï—Å–ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –Ω–µ —Å [, –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ JSON –º–∞—Å—Å–∏–≤
        if (!content.startsWith("[")) {
          const jsonMatch = content.match(/\[[\s\S]*\]/)
          if (jsonMatch) {
            content = jsonMatch[0]
          }
        }

        // –ü—ã—Ç–∞–µ–º—Å—è –ø–∞—Ä—Å–∏—Ç—å JSON
        try {
          const parsedQuestions = JSON.parse(content)

          if (!Array.isArray(parsedQuestions)) {
            lastError = `${model}: Response is not an array`
            console.error(`‚ùå [PRODUCTION] ${model}: Response is not an array`)
            continue
          }

          // –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≤–æ–ø—Ä–æ—Å–æ–≤
          const validQuestions = parsedQuestions.filter((q) => {
            return (
              q &&
              typeof q === "object" &&
              typeof q.id === "number" &&
              typeof q.text === "string" &&
              typeof q.category === "string" &&
              typeof q.difficulty === "string" &&
              q.text.length > 10
            )
          })

          if (validQuestions.length < 10) {
            lastError = `${model}: Only ${validQuestions.length} valid questions (need 10+)`
            console.error(`‚ùå [PRODUCTION] ${model}: Only ${validQuestions.length} valid questions`)
            continue
          }

          // –£—Å–ø–µ—Ö!
          questions = validQuestions.slice(0, 12) // –ë–µ—Ä–µ–º –º–∞–∫—Å–∏–º—É–º 12 –≤–æ–ø—Ä–æ—Å–æ–≤
          modelUsed = model
          console.log(`‚úÖ [PRODUCTION] Successfully generated ${questions.length} questions using ${model}`)
          break
        } catch (parseError) {
          lastError = `${model}: JSON parse error - ${parseError}`
          console.error(`‚ùå [PRODUCTION] ${model} JSON parse error:`, parseError)
          console.error(`‚ùå [PRODUCTION] Raw content:`, content.substring(0, 500))
          continue
        }
      } catch (fetchError) {
        lastError = `${model}: Network error - ${fetchError}`
        console.error(`‚ùå [PRODUCTION] ${model} network error:`, fetchError)
        continue
      }
    }

    // –ï—Å–ª–∏ –≤—Å–µ –º–æ–¥–µ–ª–∏ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É
    if (questions.length === 0) {
      console.error("‚ùå [PRODUCTION] All Perplexity models failed:", lastError)
      return NextResponse.json(
        {
          error: "Failed to generate questions with Perplexity API",
          details: lastError,
          modelsAttempted: models,
        },
        { status: 500 },
      )
    }

    console.log(`üéâ [PRODUCTION] Questions generated successfully using ${modelUsed}`)

    return NextResponse.json({
      questions,
      source: "perplexity",
      isDemoMode: false,
      modelUsed,
      totalQuestions: questions.length,
    })
  } catch (error) {
    console.error("‚ùå [PRODUCTION] Unexpected error:", error)
    return NextResponse.json(
      {
        error: "Internal server error",
        details: error instanceof Error ? error.message : "Unknown error",
      },
      { status: 500 },
    )
  }
}
