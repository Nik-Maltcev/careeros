import { NextRequest, NextResponse } from 'next/server'
import { RobokassaService } from '@/lib/robokassa'
import { createRouteHandlerClient } from '@supabase/auth-helpers-nextjs'
import { cookies } from 'next/headers'
import { isSupabaseConfigured } from '@/lib/supabase'

export async function POST(request: NextRequest) {
  try {
    const { planId } = await request.json()
    
    console.log('Payment creation request:', { planId })

    if (!planId) {
      return NextResponse.json(
        { error: 'Plan ID is required' },
        { status: 400 }
      )
    }

    // –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è —Å–µ—Ä–≤–µ—Ä–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω—ã
    console.log('üîç API: Checking user auth for payment...')
    
    if (!isSupabaseConfigured) {
      console.log('‚ùå API: Supabase not configured')
      return NextResponse.json(
        { error: '–î–ª—è –ø–æ–∫—É–ø–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç' },
        { status: 401 }
      )
    }

    const supabase = createRouteHandlerClient({ cookies })
    const { data: { session }, error: sessionError } = await supabase.auth.getSession()
    
    console.log('üë§ API: Session check:', { 
      hasSession: !!session, 
      hasUser: !!session?.user,
      email: session?.user?.email,
      sessionError: sessionError?.message 
    })
    
    if (sessionError || !session?.user) {
      console.log('‚ùå API: No valid session found for payment')
      return NextResponse.json(
        { error: '–î–ª—è –ø–æ–∫—É–ø–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç' },
        { status: 401 }
      )
    }

    const plan = RobokassaService.getPlanById(planId)
    if (!plan) {
      return NextResponse.json(
        { error: 'Plan not found' },
        { status: 404 }
      )
    }

    const userId = session.user.id
    const userEmail = session.user.email
    
    console.log('Authorized user info:', { userId, userEmail })

    // –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞
    const payment = RobokassaService.createPayment(plan, userEmail, userId)
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º URL –¥–ª—è –æ–ø–ª–∞—Ç—ã
    const paymentUrl = RobokassaService.generatePaymentUrl(payment)
    
    console.log('Payment created successfully:', {
      invId: payment.invId,
      amount: payment.outSum,
      paymentUrl
    })

    return NextResponse.json({
      success: true,
      paymentUrl,
      invId: payment.invId,
      amount: payment.outSum,
      plan: plan
    })

  } catch (error) {
    console.error('Payment creation error:', error)
    return NextResponse.json(
      { error: 'Failed to create payment' },
      { status: 500 }
    )
  }
}