import { NextRequest, NextResponse } from 'next/server'
import { RobokassaService } from '@/lib/robokassa'
import { supabase, isSupabaseConfigured } from '@/lib/supabase'

export async function POST(request: NextRequest) {
  try {
    const { planId } = await request.json()
    
    console.log('Payment creation request:', { planId })

    if (!planId) {
      return NextResponse.json(
        { error: 'Plan ID is required' },
        { status: 400 }
      )
    }

    // –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ —Ç–æ–∫–µ–Ω –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö
    console.log('üîç API: Checking user auth for payment...')
    
    if (!isSupabaseConfigured) {
      console.log('‚ùå API: Supabase not configured')
      return NextResponse.json(
        { error: '–î–ª—è –ø–æ–∫—É–ø–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç' },
        { status: 401 }
      )
    }

    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    const authHeader = request.headers.get('authorization')
    const token = authHeader?.replace('Bearer ', '')
    
    console.log('üîë API: Token check:', { hasAuthHeader: !!authHeader, hasToken: !!token })
    
    if (!token) {
      console.log('‚ùå API: No auth token provided')
      return NextResponse.json(
        { error: '–î–ª—è –ø–æ–∫—É–ø–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç' },
        { status: 401 }
      )
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ Supabase
    const { data: { user }, error: userError } = await supabase.auth.getUser(token)
    
    console.log('üë§ API: User check:', { 
      hasUser: !!user, 
      email: user?.email,
      id: user?.id,
      userError: userError?.message 
    })
    
    if (userError || !user) {
      console.log('‚ùå API: Invalid token or user not found')
      return NextResponse.json(
        { error: '–î–ª—è –ø–æ–∫—É–ø–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç' },
        { status: 401 }
      )
    }

    const plan = RobokassaService.getPlanById(planId)
    if (!plan) {
      return NextResponse.json(
        { error: 'Plan not found' },
        { status: 404 }
      )
    }

    const userId = user.id
    const userEmail = user.email
    
    console.log('Authorized user info:', { userId, userEmail })

    // –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞
    const payment = RobokassaService.createPayment(plan, userEmail, userId)
    
    // –í—Ä–µ–º–µ–Ω–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ –≤ –æ–±—ã—á–Ω—É—é —Ç–∞–±–ª–∏—Ü—É payments
    try {
      const { error: paymentError } = await supabase
        .from('payments')
        .insert({
          inv_id: payment.invId,
          user_id: userId,
          plan_id: plan.id,
          amount: payment.outSum,
          email: userEmail,
          status: 'pending',
          created_at: new Date().toISOString()
        })

      if (paymentError) {
        console.error('Error saving payment:', paymentError)
        return NextResponse.json(
          { error: 'Failed to create payment record' },
          { status: 500 }
        )
      }
    } catch (error) {
      console.error('Error creating payment:', error)
      return NextResponse.json(
        { error: 'Failed to create payment record' },
        { status: 500 }
      )
    }
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º URL –¥–ª—è –æ–ø–ª–∞—Ç—ã
    const paymentUrl = RobokassaService.generatePaymentUrl(payment)
    
    console.log('Payment created successfully:', {
      invId: payment.invId,
      amount: payment.outSum,
      paymentUrl
    })

    return NextResponse.json({
      success: true,
      paymentUrl,
      invId: payment.invId,
      amount: payment.outSum,
      plan: plan
    })

  } catch (error) {
    console.error('Payment creation error:', error)
    return NextResponse.json(
      { error: 'Failed to create payment' },
      { status: 500 }
    )
  }
}