import { NextRequest, NextResponse } from 'next/server'
import { RobokassaService } from '@/lib/robokassa'
import { supabase } from '@/lib/supabase'

// GET –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
export async function GET(request: NextRequest) {
  console.log('üîç GET request to payment result endpoint')
  
  // –ü—Ä–æ–≤–µ—Ä–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∏
  try {
    const { data: payments, error } = await supabase
      .from('payments')
      .select('*')
      .order('created_at', { ascending: false })
      .limit(5)
    
    console.log('üìã Recent payments:', payments)
    
    return NextResponse.json({ 
      message: 'Payment result endpoint is working',
      timestamp: new Date().toISOString(),
      recentPayments: payments,
      error: error?.message
    })
  } catch (error) {
    console.error('Error fetching payments:', error)
    return NextResponse.json({ 
      message: 'Payment result endpoint is working',
      timestamp: new Date().toISOString(),
      error: 'Failed to fetch payments'
    })
  }
}

export async function POST(request: NextRequest) {
  console.log('üîî Payment result callback received!')
  
  try {
    const formData = await request.formData()
    
    // –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    const allData: Record<string, any> = {}
    for (const [key, value] of formData.entries()) {
      allData[key] = value
    }
    console.log('üìã All form data received:', allData)
    
    const outSum = parseFloat(formData.get('OutSum') as string)
    const invId = parseInt(formData.get('InvId') as string)
    const signatureValue = formData.get('SignatureValue') as string
    const email = formData.get('EMail') as string
    const paymentMethod = formData.get('PaymentMethod') as string
    const fee = parseFloat(formData.get('Fee') as string || '0')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å –ë–ï–ó –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (–º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è)
    let signatureString = `${outSum}:${invId}:${process.env.ROBOKASSA_PASSWORD_2}`
    
    const expectedSignature = require('crypto').createHash('md5').update(signatureString).digest('hex').toUpperCase()
    const isValidSignature = expectedSignature === signatureValue.toUpperCase()
    
    console.log('Result signature verification:', {
      outSum,
      invId,
      signatureString,
      expectedSignature,
      receivedSignature: signatureValue,
      isValid: isValidSignature
    })

    if (!isValidSignature) {
      console.error('Invalid signature from Robokassa')
      return NextResponse.json({ error: 'Invalid signature' }, { status: 400 })
    }

    // –ò—â–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ –ø–æ invId –≤ —Ç–∞–±–ª–∏—Ü–µ payments
    try {
      const { data: existingPayment, error: paymentError } = await supabase
        .from('payments')
        .select('*')
        .eq('inv_id', invId)
        .single()

      if (paymentError || !existingPayment) {
        console.error('Payment not found:', paymentError)
        // –í—Å–µ —Ä–∞–≤–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º OK, —á—Ç–æ–±—ã Robokassa –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–ª–∞ –∑–∞–ø—Ä–æ—Å
        return new NextResponse(`OK${invId}`, { status: 200 })
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–ª–∞—Ç–µ–∂ –µ—â–µ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω
      if (existingPayment.status === 'completed') {
        console.log('Payment already processed:', invId)
        return new NextResponse(`OK${invId}`, { status: 200 })
      }

      const plan = RobokassaService.getPlanById(existingPayment.plan_id)
      if (!plan) {
        console.error('Plan not found:', existingPayment.plan_id)
        return new NextResponse(`OK${invId}`, { status: 200 })
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –∏–Ω—Ç–µ—Ä–≤—å—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      if (existingPayment.user_id) {
        try {
          // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          const { data: profile, error: profileError } = await supabase
            .from('profiles')
            .select('*')
            .eq('id', existingPayment.user_id)
            .single()

          if (profileError) {
            console.error('Error fetching user profile:', profileError)
          } else if (profile) {
            // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤—å—é
            const { error: updateError } = await supabase
              .from('profiles')
              .update({
                max_interviews: profile.max_interviews + plan.interviews
              })
              .eq('id', existingPayment.user_id)

            if (updateError) {
              console.error('Error updating user interviews:', updateError)
            } else {
              console.log(`Added ${plan.interviews} interviews to user ${existingPayment.user_id}`)
            }
          }
        } catch (error) {
          console.error('Error processing user payment:', error)
        }
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π
      const { error: updateError } = await supabase
        .from('payments')
        .update({
          status: 'completed',
          fee: fee,
          payment_method: paymentMethod,
          completed_at: new Date().toISOString()
        })
        .eq('inv_id', invId)

      if (updateError) {
        console.error('Error updating payment status:', updateError)
      } else {
        console.log('Payment completed successfully:', invId)
      }

    } catch (error) {
      console.error('Error processing payment result:', error)
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–ª—è Robokassa
    return new NextResponse(`OK${invId}`, { status: 200 })

  } catch (error) {
    console.error('Payment processing error:', error)
    return NextResponse.json(
      { error: 'Payment processing failed' },
      { status: 500 }
    )
  }
}