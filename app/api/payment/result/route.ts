import { NextRequest, NextResponse } from 'next/server'
import { RobokassaService } from '@/lib/robokassa'
import { supabase } from '@/lib/supabase'

// –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç Robokassa
async function processPaymentNotification(data: {
  outSum: number
  invId: number
  signatureValue: string
  email: string
  paymentMethod: string
  fee: number
}) {
  const { outSum, invId, signatureValue, email, paymentMethod, fee } = data
  
  console.log('üîî Processing payment notification:', { outSum, invId, signatureValue })
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å –ë–ï–ó –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (–º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è)
  // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ø–∏—Å–∏ –¥–ª—è —Ä—É—á–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
  if (signatureValue !== 'manual') {
    let signatureString = `${outSum}:${invId}:${process.env.ROBOKASSA_PASSWORD_2}`
    
    const expectedSignature = require('crypto').createHash('md5').update(signatureString).digest('hex').toUpperCase()
    const isValidSignature = expectedSignature === signatureValue.toUpperCase()
    
    console.log('üîê Signature verification:', {
      outSum,
      invId,
      signatureString,
      expectedSignature,
      receivedSignature: signatureValue,
      isValid: isValidSignature
    })

    if (!isValidSignature) {
      console.error('‚ùå Invalid signature from Robokassa')
      return NextResponse.json({ error: 'Invalid signature' }, { status: 400 })
    }
  } else {
    console.log('üîß Manual processing - skipping signature verification')
  }

  // –ò—â–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ –ø–æ invId –≤ —Ç–∞–±–ª–∏—Ü–µ payments
  try {
    const { data: existingPayment, error: paymentError } = await supabase
      .from('payments')
      .select('*')
      .eq('inv_id', invId)
      .single()

    if (paymentError || !existingPayment) {
      console.error('‚ùå Payment not found:', paymentError)
      // –í—Å–µ —Ä–∞–≤–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º OK, —á—Ç–æ–±—ã Robokassa –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–ª–∞ –∑–∞–ø—Ä–æ—Å
      return new NextResponse(`OK${invId}`, { status: 200 })
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–ª–∞—Ç–µ–∂ –µ—â–µ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω
    if (existingPayment.status === 'completed') {
      console.log('‚úÖ Payment already processed:', invId)
      return new NextResponse(`OK${invId}`, { status: 200 })
    }

    const plan = RobokassaService.getPlanById(existingPayment.plan_id)
    if (!plan) {
      console.error('‚ùå Plan not found:', existingPayment.plan_id)
      return new NextResponse(`OK${invId}`, { status: 200 })
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –∏–Ω—Ç–µ—Ä–≤—å—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (existingPayment.user_id) {
      try {
        console.log('üîç Looking for user profile:', existingPayment.user_id)
        
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const { data: profile, error: profileError } = await supabase
          .from('profiles')
          .select('*')
          .eq('id', existingPayment.user_id)
          .single()

        console.log('üë§ Profile query result:', { profile, profileError })

        if (profileError) {
          console.error('‚ùå Error fetching user profile:', profileError)
        } else if (profile) {
          const newMaxInterviews = profile.max_interviews + plan.interviews
          console.log('üìä Updating interviews:', { 
            current: profile.max_interviews, 
            adding: plan.interviews, 
            new: newMaxInterviews 
          })
          
          // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤—å—é
          const { data: updateData, error: updateError } = await supabase
            .from('profiles')
            .update({
              max_interviews: newMaxInterviews
            })
            .eq('id', existingPayment.user_id)
            .select()

          console.log('üíæ Update result:', { updateData, updateError })

          if (updateError) {
            console.error('‚ùå Error updating user interviews:', updateError)
          } else {
            console.log(`‚úÖ Added ${plan.interviews} interviews to user ${existingPayment.user_id}. New total: ${newMaxInterviews}`)
          }
        } else {
          console.error('‚ùå Profile not found for user:', existingPayment.user_id)
        }
      } catch (error) {
        console.error('‚ùå Error processing user payment:', error)
      }
    } else {
      console.error('‚ùå No user_id in payment:', existingPayment)
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π
    const { error: updateError } = await supabase
      .from('payments')
      .update({
        status: 'completed',
        fee: fee,
        payment_method: paymentMethod,
        completed_at: new Date().toISOString()
      })
      .eq('inv_id', invId)

    if (updateError) {
      console.error('‚ùå Error updating payment status:', updateError)
    } else {
      console.log('‚úÖ Payment completed successfully:', invId)
    }

  } catch (error) {
    console.error('‚ùå Error processing payment result:', error)
  }

  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–ª—è Robokassa
  return new NextResponse(`OK${invId}`, { status: 200 })
}

// GET –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ - –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è Robokassa –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
export async function GET(request: NextRequest) {
  console.log('üîç GET request to payment result endpoint')
  
  const { searchParams } = new URL(request.url)
  
  // –ï—Å–ª–∏ –µ—Å—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–ª–∞—Ç–µ–∂–∞, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç Robokassa
  if (searchParams.has('OutSum') && searchParams.has('InvId')) {
    console.log('üì® Processing Robokassa notification via GET')
    
    const outSum = parseFloat(searchParams.get('OutSum') || '0')
    const invId = parseInt(searchParams.get('InvId') || '0')
    const signatureValue = searchParams.get('SignatureValue') || ''
    const email = searchParams.get('EMail') || ''
    const paymentMethod = searchParams.get('PaymentMethod') || ''
    const fee = parseFloat(searchParams.get('Fee') || '0')
    
    console.log('üìã GET notification data:', {
      outSum, invId, signatureValue, email, paymentMethod, fee
    })
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏, —á—Ç–æ –∏ –¥–ª—è POST
    return await processPaymentNotification({
      outSum, invId, signatureValue, email, paymentMethod, fee
    })
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è —Ä—É—á–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞
  if (searchParams.has('manual_process')) {
    const invId = parseInt(searchParams.get('manual_process') || '0')
    console.log('üîß Manual payment processing requested for inv_id:', invId)
    
    if (invId) {
      console.log('üîß Starting manual processing for inv_id:', invId)
      // –ò–º–∏—Ç–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç Robokassa –¥–ª—è —Ä—É—á–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
      const result = await processPaymentNotification({
        outSum: 0, // –ë—É–¥–µ—Ç –≤–∑—è—Ç–æ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        invId: invId,
        signatureValue: 'manual', // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ø–∏—Å–∏ –¥–ª—è —Ä—É—á–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        email: '',
        paymentMethod: 'manual',
        fee: 0
      })
      console.log('üîß Manual processing result:', result)
      return result
    } else {
      console.log('‚ùå Invalid inv_id for manual processing:', invId)
      return NextResponse.json({ error: 'Invalid inv_id' }, { status: 400 })
    }
  }
  
  // –ò–Ω–∞—á–µ —ç—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–µ–π
  try {
    const { data: payments, error } = await supabase
      .from('payments')
      .select('*')
      .order('created_at', { ascending: false })
      .limit(5)
    
    console.log('üìã Recent payments:', payments)
    
    return NextResponse.json({ 
      message: 'Payment result endpoint is working',
      timestamp: new Date().toISOString(),
      recentPayments: payments,
      error: error?.message,
      manualProcessingHelp: 'To manually process a payment, add ?manual_process=INV_ID to the URL'
    })
  } catch (error) {
    console.error('Error fetching payments:', error)
    return NextResponse.json({ 
      message: 'Payment result endpoint is working',
      timestamp: new Date().toISOString(),
      error: 'Failed to fetch payments'
    })
  }
}

export async function POST(request: NextRequest) {
  console.log('üîî Payment result callback received!')
  
  try {
    const formData = await request.formData()
    
    // –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    const allData: Record<string, any> = {}
    for (const [key, value] of formData.entries()) {
      allData[key] = value
    }
    console.log('üìã All form data received:', allData)
    
    const outSum = parseFloat(formData.get('OutSum') as string)
    const invId = parseInt(formData.get('InvId') as string)
    const signatureValue = formData.get('SignatureValue') as string
    const email = formData.get('EMail') as string
    const paymentMethod = formData.get('PaymentMethod') as string
    const fee = parseFloat(formData.get('Fee') as string || '0')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å –ë–ï–ó –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (–º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è)
    let signatureString = `${outSum}:${invId}:${process.env.ROBOKASSA_PASSWORD_2}`
    
    const expectedSignature = require('crypto').createHash('md5').update(signatureString).digest('hex').toUpperCase()
    const isValidSignature = expectedSignature === signatureValue.toUpperCase()
    
    console.log('Result signature verification:', {
      outSum,
      invId,
      signatureString,
      expectedSignature,
      receivedSignature: signatureValue,
      isValid: isValidSignature
    })

    if (!isValidSignature) {
      console.error('Invalid signature from Robokassa')
      return NextResponse.json({ error: 'Invalid signature' }, { status: 400 })
    }

    // –ò—â–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ –ø–æ invId –≤ —Ç–∞–±–ª–∏—Ü–µ payments
    try {
      const { data: existingPayment, error: paymentError } = await supabase
        .from('payments')
        .select('*')
        .eq('inv_id', invId)
        .single()

      if (paymentError || !existingPayment) {
        console.error('Payment not found:', paymentError)
        // –í—Å–µ —Ä–∞–≤–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º OK, —á—Ç–æ–±—ã Robokassa –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–ª–∞ –∑–∞–ø—Ä–æ—Å
        return new NextResponse(`OK${invId}`, { status: 200 })
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–ª–∞—Ç–µ–∂ –µ—â–µ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω
      if (existingPayment.status === 'completed') {
        console.log('Payment already processed:', invId)
        return new NextResponse(`OK${invId}`, { status: 200 })
      }

      const plan = RobokassaService.getPlanById(existingPayment.plan_id)
      if (!plan) {
        console.error('Plan not found:', existingPayment.plan_id)
        return new NextResponse(`OK${invId}`, { status: 200 })
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –∏–Ω—Ç–µ—Ä–≤—å—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      if (existingPayment.user_id) {
        try {
          // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          const { data: profile, error: profileError } = await supabase
            .from('profiles')
            .select('*')
            .eq('id', existingPayment.user_id)
            .single()

          if (profileError) {
            console.error('Error fetching user profile:', profileError)
          } else if (profile) {
            // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤—å—é
            const { error: updateError } = await supabase
              .from('profiles')
              .update({
                max_interviews: profile.max_interviews + plan.interviews
              })
              .eq('id', existingPayment.user_id)

            if (updateError) {
              console.error('Error updating user interviews:', updateError)
            } else {
              console.log(`Added ${plan.interviews} interviews to user ${existingPayment.user_id}`)
            }
          }
        } catch (error) {
          console.error('Error processing user payment:', error)
        }
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π
      const { error: updateError } = await supabase
        .from('payments')
        .update({
          status: 'completed',
          fee: fee,
          payment_method: paymentMethod,
          completed_at: new Date().toISOString()
        })
        .eq('inv_id', invId)

      if (updateError) {
        console.error('Error updating payment status:', updateError)
      } else {
        console.log('Payment completed successfully:', invId)
      }

    } catch (error) {
      console.error('Error processing payment result:', error)
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–ª—è Robokassa
    return new NextResponse(`OK${invId}`, { status: 200 })

  } catch (error) {
    console.error('Payment processing error:', error)
    return NextResponse.json(
      { error: 'Payment processing failed' },
      { status: 500 }
    )
  }
}